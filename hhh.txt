
create role g315_familia; создать юзера
alter role g315_chapaitis with login; разрешить вход
alter role g315_chapaitis with password 'password'; задать пароль
x
select datname from pg_database; посмотреть список баз данных
create database g315_chapaiti; создать базу данных
alter database g315_chapaitis owner to g315_chapaitis; передать права на базу данных
\c g315_chapaitis перейти под свою бд
\с g315_chapaitis g315_chapaitis подключиться к бд под своим юзером
psql -h 10.0.108.107 -U g315_chapaitis -d g315_chapaitis
подключиться к своей бд под своим юзером
\? - список схем
\dn - вывод схем 
select nspname from pg_namespace; посмотреть список схем
create schema lab03; создать схему
show search_path; показать переменную;
create table lab03.mytable; создать таблицу
set search_path = 'lab03'; поставить свою переменную до перезагрузки сервера 
alter database g315_chapaitis set search_path = 'lab03'; поставить свою переменную навсегда 
alter system set listen_addresses = '0.0.0.0';
select pg_database size('g315_chapaitis'); показать размер базы данных

--------------------------------------------------------------------------------------------------------

vi /etc/apk/repositories - убрать решетку у второй ссылки
apk update
apk add docker
rc-update add docker 
rc-service docker start 
docker image pull postgres:alpine
docker inspect postgres:alpine | more
docker volume create mydata
docker image ls
docker run -d -p 11111:5432 -v mydata:/var/lib/pastgresql/data -e POSTGRES_PASSWORD=12345 --name mypostgres --restart always postgres alpine - запускает докер в фоне
docker ps
ip a
docker run -i -t alpine - создать алпайн контейнер также можно дебиан или убунту и делать там все что угодно 
docker ps -a - показать закрытые контейнеры
docker ps - показать контейнеры
создать 2 контейнера с постгресом 
2 базы данных
схемы
docker run -d -p 9443:9443 -w /var/

--------------------------------------------------------------------------------------------------------

passwd - сменить пароль
apk update
apk add curl - скачать 
apk add "пакет" - установка пакета по
apk search "название" - поиск пакета по
adduser postgres 
пароль - password
su - "имя юзера" - сменить юзера 
# - рут
$ - пользователь 
exit - выйти из командной строки или из пользователя (оболочки)
curl "ссылка из блокнота" > "файл" - загрузить файл по ссылке и сохранить под указанным именем (postgresql-16.0)
стрелка вниз - 30гб с копейками если нет то не правильно 

ls -l -h - показать список файлов в текущем каталоге 

tar -x -v -f "файл архива" - распокавать файл в текущую папку

cd "имя папки" - перейти в папку
apk add gcc - установить компилятор языка си

apk add lib-dev - библиотека языка си для сборки ПО

apk add readline-dev - библиотека для работы с командной строкой

apk add zlib-dev - библиотека для сжатия файлов

apk add icu-dev - библиотека для поддержки разных языков (локалей)

apk add python 3-dev - пакет с языком Пайтон

apk add linux-headers - исходные тексты ядра linux для сборки ПО

make - утилита сборки по
apk add make 

./configure - выполнить предварительную настройку сборки по

pwd - вывести текущую папку

./configure --prefix=/"путь установки" --with python - настройка сборки с поддержкой языка Пайтон в определенную папку т

make 

make install - произвести установку ПО по ранее выбранному пути 

cd ~ - перейти в домашнюю папку пользователя 

apk add nano - устанавливаем текстовый редактор нано 

nano "файл" - редактировать файл 

nano .profile - создать файл в домашней папке с содержимым: 
export PATH=$PATH: /home/postgres/psql160/bin - добавить путь к исполнимым файлам сервера

expotr PGDATA=/home/postgres/psql160data - задать путь к папке с кластером бд 

source .profile - установить указанные файлы переменные окружения 

env - вывод всех переменных окружения и их значений 
export "переменная"="значение" - задание переменной окружения 

echo $"переменная" - вывод значения переменной 

initdb -k - создать новый кластер без данных в указанной в PGDATA переменной папке и включить контроль целостности 

pg_ctl -l "имя файла протокола" start - запустить сервер и выводить ход работы в файл

psql - подключиться к локальному серверу 
\q - выход из psql

--------------------------------------------------------------------------------------------------------

psql -U  postgres - подключиться к серверу
= - ждёт написания команды
- - ждёт продолжения написания команды до ;
\q - выйти из сервера 
\l - вывести список баз данных (чтобы выйти нажать на q)
\du - выводит список пользователей баз данных

\c - показывает под каким юзером вы зашли, также если после \с указать имя базы данных то он подключится к ней

\i имя файла .sql - выполнит все команды находящиеся в файле
\! команда - выполняет команду командной строки  
\dt - вывод таблиц

createdb (либо CREATE DATABASE) "имя"; - создать базу данных
drop database "имя"; - удалить базу данных 

create table название таблицы (название столбцов через запитую после каждой указать тип данных)
Пример: create table table (a int, b float, d chat(30)); (30) - после чара количество символов 

\? - вывести все команды как help

\dt - список таблиц
\d имя таблицы - информация о таблице (структура таблицы)

таблица pg_class - все данные о таблице 
select имя что смотреть если не знаешь *, relname from имя таблицы - посмотреть содержимое таблицы 
insert into имя таблицы (x, y) и в скобках через запитую заносим данные в столбы (),(),() в каждых скобках данные строчек сколько стобцов столько скобок 

ghex - программа чтобы в открыть таблицу в коде в байтах на линуксе (нули - пустое пространство)

checkpoint; - запускает процесс чек поинта чтобы он сам сохранял из оперативки на жёсткий диск 

delete frop имя таблицы; - удаляет все данные с таблицы если не указали where то есть что именно удалять 

vacuum full имя таблицы - создаёт новую таблицу и начинает копировать данные из старой в новою (выкидывая все удаленные файлы так как они все равно остаются в таблицы и чтобы файл с таблицей стал меньше весить можно сделать вакум)
analy
vacuum analyse имя - обновляет статистику о таблице 

select * frop generate_series(начальное значение, конечное значение); - добавить определенное количество строчек в таблицу 

explain - показать как постгрес это сделал (выполнил определенную команду. пишется в начале команды)
explain analyze - делает и показывает время за сколько сделал 
 
create index имя индекса ON где делать индекс(имя столбца) - создать индексы по столбцу (добавляет размера бд, но поиск будет проходить быстрее потому что по индексам)

SELECT pg_size_pretty(pg_database_size('имя бд')); - показать размер базы данных 

select x from mytab where x = 1000000; - найти число в столице x (с индексом будет быстрее, без индекса медленнее)
 
все работает в виде дерева и или графа 
ищем строчку и в конце графа будет написан номер строки в которой эта строчка лежит (метод поиска по древовидному индексу)

--------------------------------------------------------------------------------------------------------

passwd - сменить пароль
apk update
apk add curl - скачать 
apk add "пакет" - установка пакета по
apk search "название" - поиск пакета по
adduser postgres 
пароль - password
su - "имя юзера" - сменить юзера 
# - рут
$ - пользователь 
exit - выйти из командной строки или из пользователя (оболочки)
curl "ссылка из блокнота" > "файл" - загрузить файл по ссылке и сохранить под указанным именем (postgresql-16.0)
стрелка вниз - 30гб с копейками если нет то не правильно 

ls -l -h - показать список файлов в текущем каталоге 

tar -x -v -f "файл архива" - распокавать файл в текущую папку

cd "имя папки" - перейти в папку

./configure - выполнить предварительную настройку сборки по

переключение alt + стрелка вправо/влево между консолями 

apk add gcc - установить компилятор языка си

apk add lib-dev - библиотека языка си для сборки ПО

apk add readline-dev - библиотека для работы с командной строкой

apk add zlib-dev - библиотека для сжатия файлов

apk add icu-dev - библиотека для поддержки разных языков (локалей)

apk add python 3-dev - пакет с языком Пайтон

apk add linux-headers - исходные тексты ядра linux для сборки ПО

make - утилита сборки по
apk add make 

не надо ./configure --without -icu - провести настройку сборки без использования данной библиотеки (icu)

pwd - вывести текущую папку

./configure --prefix=/"путь установки" --with python - настройка сборки с поддержкой языка Пайтон в определенную папку т

make -j "кол-во ядер" - сборка ПО с использованием указанного количества ядер процессора 
 
make install - произвести установку ПО по ранее выбранному пути 

cd ~ - перейти в домашнюю папку пользователя 

apk add nano - устанавливаем текстовый редактор нано 

nano "файл" - редактировать файл 

nano .profile - создать файл в домашней папке с содержимым: 
export PATH=$PATH: /home/postgres/psql160/bin - добавить путь к исполнимым файлам сервера

expotr PGDATA=/home/postgres/psql160data - задать путь к папке с кластером бд 

source .profile - установить указанные файлы переменные окружения 

env - вывод всех переменных окружения и их значений 
export "переменная"="значение" - задание переменной окружения 

echo $"переменная" - вывод значения переменной 

initdb -k - создать новый кластер без данных в указанной в PGDATA переменной папке и включить контроль целостности 

pg_ctl -l "имя файла протокола" start - запустить сервер и выводить ход работы в файл

psql - подключиться к локальному серверу 
\q - выход из psql
pg_ctl stop
название файла протокола myserver.txt